SOLID原则
1、SRP(单一职责原则)：每一个类将负责单一的问题、任务或者它关注的点，这种方式你只需要改变相应的类，只有这个类需要再次测试。
                      SRP 核心是把整个问题分为小部分，并且每个小部分都将通过一个单独的类负责。
2、OCP(开发封闭原则)：一个类应该对扩展开放，对修改关闭。这意味一旦你创建了一个类并且应用程序的其他部分开始使用它，你不应该修改它。
3、LSP(里氏替换原则): 派生的子类应该是可替换基类的，也就是说任何基类可以出现的地方，子类一定可以出现。
4、ISP(接口隔离原则)：表明类不应该被迫依赖他们不使用的方法，也就是说一个接口应该拥有尽可能少的行为，它是精简的，也是单一的。
5、DIP(依赖倒置原则)：表明高层模块不应该依赖低层模块，相反，他们应该依赖抽象类或者接口。这意味着你不应该在高层模块中使用具体的低层模块。
                      因为这样的话，高层模块变得紧耦合低层模块。如果明天，你改变了低层模块，那么高层模块也会被修改。
					  根据DIP原则，高层模块应该依赖抽象（以抽象类或者接口的形式），低层模块也是如此。通过面向接口（抽象类）编程，紧耦合被移除。